diff --git a/dzgui.sh b/dzgui.sh
index b9409e0..f5b7a81 100755
--- a/dzgui.sh
+++ b/dzgui.sh
@@ -4,6 +4,7 @@ set -o pipefail
 version=5.5.0
 
 #CONSTANTS
+branch="stable"
 aid=221100
 game="dayz"
 app_name="dzgui"
@@ -84,7 +85,7 @@ logger(){
     printf "%s␞%s␞%s::%s()::%s␞%s\n" "$date" "$tag" "$self" "$caller" "$line" "$string" >> "$debug_log"
 }
 setup_dirs(){
-    for dir in "$state_path" "$cache_path" "$share_path" "$helpers_path" "$freedesktop_path" "$config_path" "$log_path"; do
+    for dir in "$state_path" "$cache_path" "$config_path" "$log_path"; do
         if [[ ! -d $dir ]]; then
             mkdir -p "$dir"
         fi
@@ -328,28 +329,6 @@ check_version(){
         prompt_dl
     fi
 }
-download_new_version(){
-    local version_url="$(format_version_url)"
-    logger INFO "Version URL is '$version_url'"
-    logger INFO "$src_path"
-    mv "$src_path" "$src_path.old"
-    curl -L "$version_url" > "$src_path" 2>$debug_log
-    rc=$?
-    if [[ $rc -eq 0 ]]; then
-        dl_changelog
-        logger INFO "Wrote new version to $src_path"
-        chmod +x "$src_path"
-        touch "${config_path}.unmerged"
-        fdialog "DZGUI $upstream successfully downloaded. To use the new version, select Exit and restart."
-        logger INFO "User exited after version upgrade"
-        exit 0
-    else
-        mv "$src_path.old" "$src_path"
-        logger WARN "curl failed to fetch new version. Rolling back"
-        fdialog "Failed to download the new version. Restoring old version"
-        return 1
-    fi
-}
 prompt_dl(){
     _text(){
 	cat <<-EOF
@@ -359,22 +338,10 @@ prompt_dl(){
 	Your version: $version
 	Upstream version: $upstream
 	
-	Version updates introduce important bug fixes and are encouraged. Attempt to download the latest version?
+	Version updates introduce important bug fixes and are encouraged. Update the flake providing dzgui using `nix flake update`.
 	EOF
     }
-    qdialog "$(_text)" "Yes" "No"
-    if [[ $? -eq 1 ]]; then
-        return 0
-    else
-        download_new_version
-    fi
-}
-dl_changelog(){
-    local mdbranch
-    [[ $branch == "stable" ]] && mdbranch="dzgui"
-    [[ $branch == "testing" ]] && mdbranch="testing"
-    local md="https://raw.githubusercontent.com/$author/dztui/${mdbranch}/CHANGELOG.md"
-    curl -Ls "$md" > "$state_path/CHANGELOG.md"
+    return 0
 }
 test_display_mode(){
     pgrep -a gamescope | grep -q "generate-drm-mode"
@@ -408,24 +375,12 @@ check_map_count(){
         logger DEBUG "System map count is already $count or higher"
         return 0
     fi
-    qdialog "sudo password required to check system vm map count." "OK" "Cancel"
+    qdialog "vm.max_map_count is not set to 1048576. Set it to at least this value." "Continue" "Cancel"
     if [[ $? -eq 0 ]]; then
-        local pass
-        logger INFO "Prompting user for sudo escalation"
-        pass=$($steamsafe_zenity --password)
-        if [[ $? -eq 1 ]]; then
-            logger WARN "User aborted password prompt"
-            return 1
-        fi
-        local ct=$(sudo -S <<< "$pass" sh -c "sysctl -q vm.max_map_count | awk -F'= ' '{print \$2}'")
-        logger DEBUG "Old map count is $ct"
-        local new_ct
-        [[ $ct -lt $count ]] && ct=$count
-        sudo -S <<< "$pass" sh -c "echo 'vm.max_map_count=$ct' > $conf_file"
-        sudo sysctl -p "$conf_file"
-        logger DEBUG "Updated map count to $count"
+        logger WARN "Continuing without setting vm.max_map_count"
+        return 0
     else
-        logger WARN "User aborted map count prompt"
+        logger WARN "User aborted"
         return 1
     fi
 }
@@ -630,14 +585,6 @@ fetch_geo_file(){
         chmod +x "$km_helper"
     fi
 }
-fetch_helpers(){
-    fetch_a2s
-    fetch_dzq
-    fetch_geo_file
-    fetch_helpers_by_sum
-    [[ ! -f $share_path/icon.png ]] && freedesktop_dirs
-    fetch_icons
-}
 raise_error_and_quit(){
     local msg="$1"
     logger CRITICAL "$msg"
@@ -813,6 +760,7 @@ varcheck(){
         create_config
     fi
     source "$config_file"
+    branch="stable"
     local workshop_dir="$steam_path/steamapps/workshop/content/$aid"
     local game_dir="$steam_path/steamapps/common/DayZ"
     if [[ ! -d $steam_path ]] || [[ ! -d $game_dir ]] || [[ ! $(find $game_dir -type f) ]]; then
@@ -871,9 +819,9 @@ initial_setup(){
     watcher_deps
     check_architecture
     test_connection
-    fetch_helpers > >(pdialog "Checking helper files")
     varcheck
     source "$config_file"
+    branch="stable"
     lock
     legacy_vars
     legacy_cols
@@ -887,55 +835,9 @@ initial_setup(){
     is_dzg_downloading
     print_config_vals
 }
-uninstall(){
-    _full(){
-        for i in "$config_path" "$state_path" "$cache_path" "$share_path"; do
-            echo "Deleting the path '$i'"
-            rm -rf "$i"
-        done
-    }
-    _partial(){
-        for i in "$cache_path" "$share_path"; do
-            echo "Deleting the path '$i'"
-            rm -rf "$i"
-        done
-    }
-    local choice=$($steamsafe_zenity \
-        --list \
-        --radiolist \
-        --column="a" \
-        --column="b" \
-        --hide-header \
-        --text="Choose an uninstall routine below." \
-        TRUE "Keep user config files" \
-        FALSE "Delete all DZGUI files" \
-        --title="DZGUI"
-        )
-
-    case "$choice" in
-        "Keep user config files")
-            _partial
-            ;;
-        "Delete all DZGUI files")
-            _full
-            ;;
-        "")
-            echo "User aborted uninstall process"
-            exit 1
-            ;;
-    esac
-    local self="$(realpath "$0")"
-    echo "Deleting '$self'"
-    rm "$self"
-    echo "Uninstall routine complete"
-}
 main(){
     local zenv=$(zenity --version 2>/dev/null)
     [[ -z $zenv ]] && { echo "Requires zenity >= ${deps[$steamsafe_zenity]}"; exit 1; }
-    if [[ $1 == "--uninstall" ]] || [[ $1 == "-u" ]]; then
-        uninstall &&
-        exit 0
-    fi
     
     set_im_module
 
